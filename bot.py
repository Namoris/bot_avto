# -*- coding: utf-8 -*-
import os
import sqlite3
import string

from datetime import date, timedelta, datetime
from aiogram import Bot
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentTypes
from aiogram.utils import executor


BOT_TOKEN = ''
PAYMENTS_PROVIDER_TOKEN = '381764678:TEST:13317'



count_clcht = 2
n_clcht = 0

clchtid = [1086192049, 1029425997, 109425997, 1019880252 ]
clchtidrez = []


pathtopdf = r'..'
zayavkastr = '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ 5-30 –º–∏–Ω—É—Ç. –û–∂–∏–¥–∞–π—Ç–µ.'

bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)

admins = [157460875, 369935862]
m_pswd = ['1']

m_comm = ['reg_cl', 'del_cl', 'show_cl', 'mass_mail', 'ch_acc', 'send_msg', 'show_cl_id', 'set_bonus', 'add_in_activ_cl', 'del_activ_cl', 'show_comm', 'set_count_clcht', 'show_name_db']
m_db = ['nm', 'id', 'date_end', 'acc', 'date_bgn', 'date_reg', 'cnt_request', 'f_name', 'l_name', 'ref', 'cnt_bonus']

mNN = {}
count_request_today = 0
_today = date.today()

conn = sqlite3.connect('DB_clients.db')
cursor = conn.cursor()



#cursor.execute('''CREATE TABLE clients (nm text, id text, date_end text, acc text) ''')
#cursor.execute('''CREATE TABLE nm_id (nm text, id text) ''')
#nm text, id text, date_end text, acc text, date_bgn text, date_reg text, cnt_request text, f_name text, l_name text, ref text, cnt_bonus text


prices = [
    types.LabeledPrice(label='Working Time Machine', amount=5750),
    types.LabeledPrice(label='Gift wrapping', amount=500),
]

@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                        error_message="Aliens tried to steal your card's CVV,"
                                                      " but we successfully protected your credentials,"
                                                      " try to pay again in a few minutes, we need a small rest.")

@dp.callback_query_handler(lambda c: c.data == 'oferta')
async def process_callback_button(callback_query: types.CallbackQuery):
    ff = open('oferta.docx', 'rb')
    await bot.send_document(callback_query.from_user.id, ff)
    ff.close()
    #await bot.answer_callback_query(callback_query.id)
    #print(callback_query)    

@dp.callback_query_handler(lambda c: c.data == 'ref')
async def process_callback_button(callback_query: types.CallbackQuery):
    ff = open('referal.docx', 'rb')
    await bot.send_document(callback_query.from_user.id, ff)
    ff.close()


@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def got_payment(message: types.Message):
    print(message)
    await bot.send_message(message.chat.id,
                           'Hoooooray! Thanks for payment! We will proceed your order for `{} {}`'
                           ' as fast as possible! Stay in touch.'
                           '\n\nUse /buy again to get a Time Machine for your friend!'.format(
                               message.successful_payment.total_amount / 100, message.successful_payment.currency),
                           parse_mode='Markdown')

@dp.message_handler(commands=['bonus'])
async def cmd_buy(message: types.Message):
    mci = message.chat.id
    sql = "SELECT * FROM clients WHERE id=?"
    cursor.execute(sql, [(mci)])
    cl = cursor.fetchone()
    if cl is None:
        await bot.send_message(mci, '–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        await bot.send_message(mci,
                               '‚≠êÔ∏è–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]"\n–ù–∞–ø—Ä–∏–º–µ—Ä: reg 89991234567')
        await bot.send_message(mci,
                               '‚≠êÔ∏è–ü—Ä–∏–≤–µ–ª –¥—Ä—É–≥? –û—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ 2 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–∞—Ä–∏—Ñ–∞!\n–í–≤–µ–¥–∏—Ç–µ: reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞]\n–ü—Ä–∏–º–µ—Ä: reg 899912345678 89309876543.')
    else:
        inline_btn1 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –¥–Ω–∏ –∫ –ø–æ–¥–ø–∏—Å–∫–µ', callback_data='use_all_bonus')
        inline_btn2 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å 10 –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ', callback_data='use_10_bonus')
        inline_btn3 = types.InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã', callback_data='bonus_in_money')
        inline_btn4 = types.InlineKeyboardButton('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤', callback_data='ref')
        inline_kb = types.InlineKeyboardMarkup().add(inline_btn1)
        inline_kb.add(inline_btn2)
        inline_kb.add(inline_btn3)
        inline_kb.add(inline_btn4)
        s = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π:\n%s\n–í—ã –º–æ–∂–µ—Ç–µ:' % cl[10]
        await bot.send_message(mci, s, reply_markup=inline_kb)



@dp.callback_query_handler(lambda c: c.data == 'use_all_bonus')
async def process_callback_button(callback_query: types.CallbackQuery):
    mci = callback_query.from_user.id
    sql = "SELECT * FROM clients WHERE id=?"
    cursor.execute(sql, [(mci)])
    cl = cursor.fetchone()
    if cl is None:
        await bot.send_message(mci, '–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        await bot.send_message(mci,
                               '‚≠êÔ∏è–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]"\n–ù–∞–ø—Ä–∏–º–µ—Ä: reg 89991234567')
        await bot.send_message(mci,
                               '‚≠êÔ∏è–ü—Ä–∏–≤–µ–ª –¥—Ä—É–≥? –û—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ 2 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–∞—Ä–∏—Ñ–∞!\n–í–≤–µ–¥–∏—Ç–µ: reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞]\n–ü—Ä–∏–º–µ—Ä: reg 899912345678 89309876543.')
    else:
        if cl[10] != '0':
            sql = 'UPDATE clients SET cnt_bonus = ?, date_end = ?  WHERE id = ?'
            d_e = datetime.strptime(cl[2], '%Y-%m-%d').date()
            d_e = d_e + timedelta(days=(int(cl[10])))
            cursor.execute(sql, (0, d_e, mci))
            s = 'BotinfoCar üöó, [%s]\nüí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BotinfoCar –æ–ø–ª–∞—á–µ–Ω–∞ –¥–æ %s. –°–ø–∞—Å–∏–±–æ!' % (date.today(), d_e)
            await bot.send_message(mci, s)
            conn.commit()
        else:
            await bot.send_message(mci, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π.\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –≤–º–µ—Å—Ç–µ!')

@dp.callback_query_handler(lambda c: c.data == 'use_10_bonus')
async def process_callback_button(callback_query: types.CallbackQuery):
    mci = callback_query.from_user.id
    sql = "SELECT * FROM clients WHERE id=?"
    cursor.execute(sql, [(mci)])
    cl = cursor.fetchone()
    if cl is None:
        await bot.send_message(mci, '–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        await bot.send_message(mci,
                               '‚≠êÔ∏è–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]"\n–ù–∞–ø—Ä–∏–º–µ—Ä: reg 89991234567')
        await bot.send_message(mci,
                               '‚≠êÔ∏è–ü—Ä–∏–≤–µ–ª –¥—Ä—É–≥? –û—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ 2 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–∞—Ä–∏—Ñ–∞!\n–í–≤–µ–¥–∏—Ç–µ: reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞]\n–ü—Ä–∏–º–µ—Ä: reg 899912345678 89309876543.')
    else:
        if cl[10] != '0' and int(cl[10]) > 9:
            sql = 'UPDATE clients SET cnt_bonus = ?, date_end = ?  WHERE id = ?'
            d_e = datetime.strptime(cl[2], '%Y-%m-%d').date()
            d_e = d_e + timedelta(days=(10))
            cursor.execute(sql, (int(cl[10]) - 10, d_e, mci))
            s = 'BotinfoCar üöó, [%s]\nüí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BotinfoCar –æ–ø–ª–∞—á–µ–Ω–∞ –¥–æ %s. –°–ø–∞—Å–∏–±–æ!' % (date.today(), d_e)
            await bot.send_message(mci, s)
            conn.commit()
        else:
            await bot.send_message(mci, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π.\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –≤–º–µ—Å—Ç–µ!')


@dp.callback_query_handler(lambda c: c.data == 'bonus_in_money')
async def process_callback_button(callback_query: types.CallbackQuery):
    mci = callback_query.from_user.id
    sql = "SELECT * FROM clients WHERE id=?"
    cursor.execute(sql, [(mci)])
    cl = cursor.fetchone()
    if cl is None:
        await bot.send_message(mci, '–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        await bot.send_message(mci,
                               '‚≠êÔ∏è–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]"\n–ù–∞–ø—Ä–∏–º–µ—Ä: reg 89991234567')
        await bot.send_message(mci,
                               '‚≠êÔ∏è–ü—Ä–∏–≤–µ–ª –¥—Ä—É–≥? –û—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ 2 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–∞—Ä–∏—Ñ–∞!\n–í–≤–µ–¥–∏—Ç–µ: reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞]\n–ü—Ä–∏–º–µ—Ä: reg 899912345678 89309876543.')
    else:
        if cl[10] != '0' and int(cl[10]) > 60:
            await bot.send_message(admins[0], cl[0] + ' ' + cl[1] + ' —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤:%s' % cl[10])
            await bot.send_message(admins[1], cl[0] + ' ' + cl[1] + ' —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤:%s' % cl[10])

            s = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!'
            await bot.send_message(mci, s)
        else:
            await bot.send_message(mci, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π.\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –≤–º–µ—Å—Ç–µ!')


@dp.message_handler(commands=['start'])
async def cmd_buy(message: types.Message):
    print(1)
    await bot.send_message(message.chat.id, '‚≠êÔ∏è–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]"\n–ù–∞–ø—Ä–∏–º–µ—Ä: reg 89991234567')
    await bot.send_message(message.chat.id,'‚≠êÔ∏è–ü—Ä–∏–≤–µ–ª –¥—Ä—É–≥? –û—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ 2 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–∞—Ä–∏—Ñ–∞!\n–í–≤–µ–¥–∏—Ç–µ: reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞]\n–ü—Ä–∏–º–µ—Ä: reg 899912345678 89309876543.')
    await bot.send_message(message.chat.id, '–ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: 89997188148 \n–ò–ª–∏ –Ω–∞ –Ω–∞—à—É –ø–æ—á—Ç—É: \nBotinfocar@gmail.com')


    '''await bot.send_invoice(message.chat.id, title='Working Time Machine',
                           description='Want to visit your great-great-great-grandparents?'
                                       ' Make a fortune at the races?'
                                       ' Shake hands with Hammurabi and take a stroll in the Hanging Gardens?'
                                       ' Order our Working Time Machine today!',
                           provider_token=PAYMENTS_PROVIDER_TOKEN,
                           currency='RUB',
                           #photo_url='https://telegra.ph/file/d08ff863531f10bf2ea4b.jpg',
                           photo_height=512,  # !=0/None or picture won't be shown
                           photo_width=512,
                           photo_size=512,
                           is_flexible=False,  # True If you need to set up Shipping Fee
                           prices=prices,
                           start_parameter='time-machine-example',
                           payload='123456789')
    '''

@dp.message_handler(commands = [ 'help' ])
async def handle_start_help(message):
    await bot.send_message(message.chat.id,'–ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: 89997188148 \n–ò–ª–∏ –Ω–∞ –Ω–∞—à—É –ø–æ—á—Ç—É: \nBotinfocar@gmail.com')


@dp.message_handler(content_types=['text'])
async def get_text_messages(message):
    global n_clcht
    global count_clcht
    global _today
    global count_request_today
    mci = message.chat.id
    print(mci)
    if mci not in clchtid:
        if message.text.split()[0].lower() in m_comm:
            if mci in admins:
                if message.text.split()[1] in m_pswd:
                    print(message.text.split()[1])
                    if message.text.split()[0].lower() == 'reg_cl':
                        tel = message.text.split()[3][-10:]
                        count_mnth = int(message.text.split()[2])
                        sql = "SELECT * FROM clients WHERE nm=?"
                        cursor.execute(sql, [(tel)])
                        cl = cursor.fetchone()
                        if cl is None:
                            await bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ')
                        else:
                            print(cl)
                            sql = 'UPDATE clients SET date_end = ?, acc = ? WHERE id = ?'
                            if cl[2] == '':
                                
                                d_e = date.today() + timedelta(days=(count_mnth * 10))
                                cursor.execute(sql, (d_e, 1, cl[1]))
                                sql = 'UPDATE clients SET date_bgn = ?, cnt_request = ? WHERE id = ?'
                                cursor.execute(sql, (date.today(), 0, cl[1]))
                            else:
                                d_e = datetime.strptime(cl[2], '%Y-%m-%d').date()
                                if d_e < date.today():
                                    sql = 'UPDATE clients SET date_bgn = ?, cnt_request = ? WHERE id = ?'
                                    cursor.execute(sql, (date.today(), 0, cl[1]))
                                    sql = 'UPDATE clients SET date_end = ?, acc = ? WHERE id = ?'
                                    d_e = date.today() + timedelta(days=(count_mnth * 10))
                                else:
                                    d_e = d_e + timedelta(days=(count_mnth * 10))
                                cursor.execute(sql, (d_e, 1, cl[1]))
                            conn.commit()
                            print(d_e)
                            if cl[9] != '':
                                sql = "SELECT * FROM clients WHERE nm=? and acc = '1'"
                                cursor.execute(sql, [(cl[9])])
                                ref = cursor.fetchone()
                                if ref is not None:
                                    sql = 'UPDATE clients SET cnt_bonus = ? WHERE id = ?'
                                    cursor.execute(sql, (int(ref[10]) + 4, ref[1]))
                                    await bot.send_message(ref[1], '‚≠êÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—à –¥—Ä—É–≥ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –≤ BotinfoCar –∏ –∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ 4 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è!')
                                    sql = 'UPDATE clients SET cnt_bonus = ? WHERE id = ?'
                                    cursor.execute(sql, (int(cl[10]) + 2, cl[1]))
                                    inline_btn2 = types.InlineKeyboardButton('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤', callback_data='ref')
                                    inline_kb = types.InlineKeyboardMarkup().add(inline_btn2)
                                    nmes = '‚≠êÔ∏è –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ 2 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±–æ–Ω—É—Å–æ–≤!–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–µ–π –í—ã –º–æ–∂–µ—Ç–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:'
                                    await bot.send_message(cl[1], nmes, reply_markup = inline_kb)
                                    if ref[9] != '':
                                        sql = "SELECT * FROM clients WHERE nm=? and acc = '1'"
                                        cursor.execute(sql, [(ref[9])])
                                        ref1 = cursor.fetchone()
                                        if ref1 is not None:
                                            sql = 'UPDATE clients SET cnt_bonus = ? WHERE id = ?'
                                            cursor.execute(sql, (int(ref1[10]) + 1, ref1[1]))
                                            await bot.send_message(ref1[1], '‚≠êÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—à –¥—Ä—É–≥ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∞ –∏ –æ–Ω –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –≤ BotinfoCar! –ö –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω 1 –±–æ–Ω—É—Å–Ω—ã–π –¥–µ–Ω—å!')
                                    conn.commit()
                            sql = "SELECT * FROM clients WHERE ref=? and acc = '1'"
                            cursor.execute(sql, [(tel)])
                            refs = cursor.fetchall()
                            for r in refs:
                                sql = 'UPDATE clients SET cnt_bonus = ? WHERE id = ?'
                                cursor.execute(sql, (int(r[10]) + 2, r[1]))
                                await bot.send_message(r[1], '‚≠êÔ∏è –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ 2 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±–æ–Ω—É—Å–æ–≤!')

                            print(d_e)
                            conn.commit()
                            await bot.send_message(message.chat.id, 'ok')
                            s = 'BotinfoCar üöó, [%s]\nüí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BotinfoCar –æ–ø–ª–∞—á–µ–Ω–∞ –¥–æ %s. –°–ø–∞—Å–∏–±–æ!' % (date.today(), d_e)
                            await bot.send_message(cl[1], s)
                        sql = "SELECT * FROM clients"
                        cursor.execute(sql)
                        res = cursor.fetchall()
                        print(res)

                    elif message.text.split()[0].lower() == 'del_cl':
                        tel = message.text.split()[2][-10:]
                        sql = "SELECT * FROM clients WHERE nm=?"
                        cursor.execute(sql, [(tel)])
                        cl = cursor.fetchone()
                        if cl is None:
                            await bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ')
                        else:
                            sql = "delete from clients where id = ?"
                            cursor.execute(sql, (cl[1],))
                            conn.commit()
                            await bot.send_message(message.chat.id, 'ok')

                    elif message.text.split()[0].lower() == 'send_msg':
                        id = message.text.split()[2]
                        sql = "SELECT * FROM clients WHERE id=?"
                        cursor.execute(sql, [(id)])
                        cl = cursor.fetchone()
                        if cl is None:
                            await bot.send_message(message.chat.id, '–ù–µ—Ç –≤ –±–∞–∑–µ')
                        else:
                            await bot.send_message(id, message.text[message.text.find(message.text.split()[3]):])
                            await bot.send_message(message.chat.id, 'ok')

                    elif message.text.split()[0].lower() == 'set_count_clcht':
                        global count_clcht
                        count_clcht = int(message.text.split()[2])
                        await bot.send_message(message.chat.id, 'ok')

                    elif message.text.split()[0].lower() == 'ch_acc':
                        tel = message.text.split()[2][-10:]
                        sql = "SELECT * FROM clients WHERE nm=?"
                        cursor.execute(sql, [(tel)])
                        cl = cursor.fetchone()
                        if cl is None:
                            await bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ')
                        else:
                            sql = "UPDATE clients SET acc = ? WHERE nm = ?"
                            acc = int(cl[3]) ^ 1
                            cursor.execute(sql, (acc, tel))
                            print(1111)
                            conn.commit()
                            if not acc:
                                await bot.send_message(cl[1], '‚≠êÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ - 1179 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –í–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.')
                            await bot.send_message(message.chat.id, 'ok')


                    elif message.text.split()[0].lower() == 'set_bonus':
                        tel = message.text.split()[2][-10:]
                        cnt_b = message.text.split()[3]
                        sql = "SELECT * FROM clients WHERE nm=?"
                        cursor.execute(sql, [(tel)])
                        cl = cursor.fetchone()
                        if cl is None:
                            await bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ')
                        else:
                            sql = "UPDATE clients SET cnt_bonus = ? WHERE nm = ?"
                            cursor.execute(sql, (cnt_b, tel))
                            conn.commit()
                            await bot.send_message(message.chat.id, 'ok')


                    elif message.text.split()[0].lower() == 'show_cl_id':
                        for my_cl in clchtid:
                            await bot.send_message(mci, my_cl)
                        await bot.send_message(mci, count_clcht)

                    elif message.text.split()[0].lower() == 'show_comm':
                        for my_comm in m_comm:
                            await bot.send_message(mci, my_comm)

                    elif message.text.split()[0].lower() == 'show_name_db':
                        for my_db in m_db:
                            await bot.send_message(mci, my_db)

                    elif message.text.split()[0].lower() == 'show_cl':
                        if len(message.text.split()) > 2:
                            sql = "SELECT * FROM clients WHERE %s = %s" % (message.text.split()[2], message.text.split()[3])
                            cursor.execute(sql)
                        else:
                            sql = "SELECT * FROM clients"
                            cursor.execute(sql)
                        shw_cl = cursor.fetchall()
                        print(shw_cl)
                        ms = ''
                        n = 0
                        for one_cl in shw_cl:
                            ms = ms + str(one_cl) + '\n'
                            n += 1
                            if n % 10 == 0:
                                await bot.send_message(message.chat.id, ms)
                                ms = ''
                        if ms == '':
                            ms = '–≤—Å—ë'
                        await bot.send_message(message.chat.id, ms)
                        await bot.send_message(message.chat.id, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ' + str(n))
                        await bot.send_message(message.chat.id, '–ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ' + str(count_request_today))

                    elif message.text.split()[0].lower() == 'mass_mail':
                        print('mmass')
                        sql = "SELECT * FROM clients"
                        cursor.execute(sql)
                        shw_cl = cursor.fetchall()
                        print(shw_cl)
                        for cl_row in shw_cl:
                            try:
                                await bot.send_message(cl_row[1], message.text[12:])
                            except:
                                await bot.send_message(admins[0], cl_row[1] + ' —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º')
                                await bot.send_message(admins[1], cl_row[1] + ' —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º')


                    elif 'add_in_activ_cl' in message.text.split()[0].lower():
                        cl_id = int(message.text.split()[2])
                        print(clchtidrez)
                        if cl_id in clchtidrez:
                            clchtid.append(cl_id)
                            clchtidrez.remove(cl_id)
                            
                            await bot.send_message(admins[0], 'ok')
                        else:
                            await bot.send_message(admins[0], '–¢–∞–∫–æ–≥–æ id –Ω–µ—Ç')


                    elif 'del_activ_cl' in message.text.split()[0].lower():
                        cl_id = int(message.text.split()[2])
                        if cl_id in clchtid:
                            clchtid.remove(cl_id)
                            
                            await bot.send_message(admins[0], 'ok')
                        else:
                            await bot.send_message(admins[0], '–¢–∞–∫–æ–≥–æ id –Ω–µ—Ç')

        elif 'show_my_id' in message.text.split()[0].lower():
            await bot.send_message(mci, mci)

        elif 'add_me_in_rez' in message.text.split()[0].lower():
            if message.text.split()[1].lower() in m_pswd:
                clchtidrez.append(mci)
                await bot.send_message(admins[0], 'new cl: ' + str(mci))
                await bot.send_message(mci, 'ok')


        elif 'reg' in message.text.split()[0].lower():
            print(message.text)
            print(message)
            tel = message.text.split()[1][-10:]
            ref = ''
            if len(message.text.split()) == 3:
                ref = message.text.split()[2][-10:]
            sql = "SELECT * FROM clients WHERE id=?"
            cursor.execute(sql, [(mci)])
            res = cursor.fetchone()
            print(res)
            print(mci)
            if ref == tel:
                await bot.send_message(mci, '–•–∏—Ç—Ä–æ! –ù–æ —Ç–∞–∫ –Ω–µ–ª—å–∑—è)')
                ref = ''
            if res is None:
                sql = "INSERT INTO clients (nm, id, date_end, acc, date_bgn, date_reg, cnt_request, f_name, l_name, ref, cnt_bonus) VALUES (?, ?, '', 0, '', ?, 0, ?, ?, ?, 0)"
                print(ref)
                cursor.execute(sql, (tel, mci, date.today(), message.from_user.first_name, message.from_user.last_name, ref))
            else:
                print(mci)
                sql = "UPDATE clients SET nm = ? WHERE id = ?"
                cursor.execute(sql, (tel, mci))
                if res[7] == None:
                     sql = "UPDATE clients SET f_name = ? WHERE id = ?"
                     cursor.execute(sql, (message.from_user.first_name, mci))
                if res[5] == None:
                     sql = "UPDATE clients SET date_reg = ? WHERE id = ?"
                     cursor.execute(sql, (date.today(), mci))
                if res[8] == None:
                     sql = "UPDATE clients SET l_name = ? WHERE id = ?"
                     cursor.execute(sql, (message.from_user.last_name, mci))
                sql = "UPDATE clients SET ref = ? WHERE id = ?"
                cursor.execute(sql, (ref, mci))

            conn.commit()
            inline_btn1 = types.InlineKeyboardButton('–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã', callback_data = 'oferta')
            inline_btn2 = types.InlineKeyboardButton('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤', callback_data='ref')
            inline_kb = types.InlineKeyboardMarkup().add(inline_btn1)
            inline_kb.add(inline_btn2)
            s = '''–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞  \n–í –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∂–∏—Ç–µ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.\n–ü–ª–∞—Ç–µ–∂–∏ –Ω–∞ –∫–∞—Ä—Ç—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–µ—Ä–∂–∫–∞ 5-20 –º–∏–Ω—É—Ç. –ù–æ—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —É—Ç—Ä–æ–º.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ BotinfoCar.\n–ü—Ä–æ–∏–∑–≤–µ–¥—è –æ–ø–ª–∞—Ç—É, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ, —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞ –û–§–ï–†–¢–´.'''
            await bot.send_message(mci, s, reply_markup = inline_kb)

            
        else:

            sql = "SELECT * FROM clients WHERE id=?"
            cursor.execute(sql, [(mci)])
            cl = cursor.fetchone()
            if cl is None:
                await bot.send_message(mci, '–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
                await bot.send_message(mci,'‚≠êÔ∏è–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]"\n–ù–∞–ø—Ä–∏–º–µ—Ä: reg 89991234567')
                await bot.send_message(mci, '‚≠êÔ∏è–ü—Ä–∏–≤–µ–ª –¥—Ä—É–≥? –û—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ 2 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–∞—Ä–∏—Ñ–∞!\n–í–≤–µ–¥–∏—Ç–µ: reg [–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∞]\n–ü—Ä–∏–º–µ—Ä: reg 899912345678 89309876543.')
            else:
                if cl[3] == '0':
                    await bot.send_message(mci, '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å BotinfoCar –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
                elif cl[3] == '1':
                    msg = message.text.replace(' ', '')
                    if msg[:1] in ['+', '7', '8', '9']:
                        msg = ''.join([str(i) for i in msg if i in '0123456789'])
                        msg = '7' + msg[-10:]
                    mNN[msg.upper()] = mci
                    
                    if _today == date.today():
                        count_request_today += 1
                    else:
                        _today = date.today()
                        count_request_today = 0
                    #await bot.send_message(mci, zayavkastr)
                    if (len(msg) > 17) or ('188.120.251.13' in msg):
                        await bot.send_message(admins[1], '–í–Ω–∏–º–∞–Ω–∏–µ!\n–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' + str(mci) + '%%%%%' + message.text)
                        await bot.send_message(admins[0], '–í–Ω–∏–º–∞–Ω–∏–µ!\n–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +  str(mci) + '%%%%%' + message.text)
                        await bot.send_message(mci, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞')
                    elif set('oOQqIi').intersection(msg):
                         await bot.send_message(mci, 'üìù VIN –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –±—É–∫–≤—ã I, O, Q –∏–∑-–∑–∞ –∏—Ö —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ 1, 0.')
                    else:
                        mNN[msg.upper()] = mci
                        await bot.send_message(clchtid[n_clcht], str(mci) + '%%%%%' + msg)
                    if cl[6] is None:
                        sql = "UPDATE clients SET cnt_request = 0 WHERE id = ?"
                        cursor.execute(sql, (mci))
                    else:
                        sql = "UPDATE clients SET cnt_request = ? WHERE id = ?"
                        cursor.execute(sql, (int(cl[6]) + 1, mci))
                    if cl[5] is None:
                        print(mci)
                        if res[7] == None:
                            sql = "UPDATE clients SET f_name = ? WHERE id = ?"
                            cursor.execute(sql, (message.from_user.first_name, mci))
                        if res[5] == None:
                            sql = "UPDATE clients SET date_reg = ? WHERE id = ?"
                            cursor.execute(sql, (cl[2], mci))
                        if res[8] == None:
                            sql = "UPDATE clients SET l_name = ? WHERE id = ?"
                            cursor.execute(sql, (message.from_user.last_name, mci))
                    conn.commit()
                    print(n_clcht)
                    n_clcht = (n_clcht + 1) % count_clcht
                    print(n_clcht)
                    print(cl[2])
                    print(date.today())
                    d_e = datetime.strptime(cl[2], '%Y-%m-%d').date()
                    if cl[3] == '1' and d_e < date.today():
                        sql = "UPDATE clients SET acc = ? WHERE id = ?"
                        cursor.execute(sql, (0, mci))
                        await bot.send_message(mci, '‚≠êÔ∏è –°—Ä–æ–∫ –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ–∫–æ–Ω—á–µ–Ω. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ 1179 —Ä—É–±–ª–µ–π. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –í–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.')
                        conn.commit()



    else:
        print(mNN)
        #bot.send_message(mNN[message.text], '123')
        if 'fail' in message.text:
            await bot.send_message(mNN[message.text.split()[1]], '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ, –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è.')
            mNN.pop(message.text.split()[1])
        elif '&&&&&' in message.text:
            await bot.send_message(mNN[message.text.split('&&&&&')[0]], message.text.split('&&&&&')[1])
            if '188.120.251.13' in message.text: 
                
                mNN.pop(message.text.split('&&&&&')[0])
        #else:
            '''ff = open(message.text + '.pdf', 'rb')
            print(message.text + '.pdf')
            print(message.chat.id)
            await bot.send_document(mNN[message.text], ff)
            #bot.send_document(mNN[message.text], " FILEID ")
            ff.close()
            os.remove(message.text + '.pdf')'''


executor.start_polling(dp, skip_updates=True)
